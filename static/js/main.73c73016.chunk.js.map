{"version":3,"sources":["context/types.ts","context/covid/covidContext.tsx","context/covid/covidReducer.tsx","context/covid/covidStateProvider.tsx","components/Details.tsx","components/Statistics.tsx","components/pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Types","initialState","id","country","statistics","history","filtered","filter","covidContext","createContext","state","dispatch","action","type","Statistics","Countries","countries","History","SetFilter","Filter","statistic","regex","RegExp","test","continent","CovidStateProvider","children","useReducer","covidReducer","Provider","value","GetStatistics","a","instance","axios","create","baseURL","timeout","headers","useQueryString","get","res","data","response","console","log","Content","Layout","Details","deaths","cases","tests","orientation","style","color","fontWeight","gutter","span","title","M_pop","valueStyle","fontSize","prefix","ArrowUpOutlined","ArrowDownOutlined","new","total","active","recovered","backgroundColor","Search","Input","gridStyle","width","height","textAlign","covidStatistics","setCovidStatistics","useContext","CovidContext","useState","begin","setBegin","end","setEnd","activePage","setActivePage","useEffect","statisticsData","slice","display","flexDirection","justifyContent","Math","ceil","length","showTotal","range","pageSize","defaultCurrent","onChange","event","placeholder","size","onSearch","text","filterStatistics","map","key","Grid","mode","Item","label","dot","ClockCircleOutlined","className","day","population","toLocaleString","Header","Home","position","zIndex","theme","defaultSelectedKeys","padding","onClick","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73c73016.chunk.js","sourcesContent":["export enum Types {\r\n  Statistics = \"GET_STATISTICS\",\r\n  Countries = \"GET_COUNTRIES\",\r\n  History = \"GET_HISTORY\",\r\n  Filter = \"FILTER_COVIDS\",\r\n  SetFilter = \"SET_FILTER\",\r\n}\r\nexport const initialState: IState = {\r\n  id: 0,\r\n  country: null,\r\n  statistics: null,\r\n  history: null,\r\n  filtered: null,\r\n  filter: \"\",\r\n};\r\nexport interface IState {\r\n  id: number | any;\r\n  country: Object[] | any;\r\n  statistics: Array<Object> | any;\r\n  history: Array<Object> | any;\r\n  filtered: Array<Object> | any;\r\n  filter: string | any;\r\n}\r\nexport interface IDeath {\r\n  M_pop: string | any;\r\n  new: string | any;\r\n  total: number | any;\r\n}\r\nexport interface ICase {\r\n  M_pop: string | any;\r\n  active: number | any;\r\n  critical: number | any;\r\n  new: string | any;\r\n  recovered: number | any;\r\n  total: number | any;\r\n}\r\nexport interface IStatistics {\r\n  continent: string | any;\r\n  country: string | any;\r\n  day: string | any;\r\n  population: number | any;\r\n  time: string | any;\r\n  deaths: IDeath | any;\r\n  cases: ICase | any;\r\n  key: number | any;\r\n  tests: Object | any;\r\n}\r\ninterface GetStatisticsAction {\r\n  type: typeof Types.Statistics;\r\n  statistics: Object;\r\n}\r\ninterface GetCountriesAction {\r\n  type: typeof Types.Countries;\r\n  countries: Object | any;\r\n}\r\ninterface GetHistoryAction {\r\n  type: typeof Types.History;\r\n  history: Object;\r\n}\r\n\r\ninterface SetFilterCovidAction {\r\n  type: typeof Types.SetFilter;\r\n  filter: string | any;\r\n}\r\ninterface FilterCovidAction {\r\n  type: typeof Types.Filter;\r\n}\r\n\r\nexport type CovidActionTypes =\r\n  | GetStatisticsAction\r\n  | GetCountriesAction\r\n  | GetHistoryAction\r\n  | SetFilterCovidAction\r\n  | FilterCovidAction;\r\n","import { createContext } from \"react\";\r\nimport { CovidActionTypes, IState, initialState } from \"../types\";\r\nconst covidContext = createContext<{\r\n  state: IState;\r\n  dispatch: React.Dispatch<CovidActionTypes>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => null,\r\n});\r\nexport default covidContext;\r\n","import { Types, IState, CovidActionTypes, IStatistics } from \"../types\";\r\nexport default (state: IState, action: CovidActionTypes): IState => {\r\n  switch (action.type) {\r\n    case Types.Statistics:\r\n      return {\r\n        ...state,\r\n        statistics: action.statistics,\r\n      };\r\n    case Types.Countries:\r\n      return {\r\n        ...state,\r\n        country: action.countries,\r\n      };\r\n    case Types.History:\r\n      return {\r\n        ...state,\r\n        history: action.history,\r\n      };\r\n    case Types.SetFilter:\r\n      return {\r\n        ...state,\r\n        filter: action.filter,\r\n      };\r\n    case Types.Filter:\r\n      return {\r\n        ...state,\r\n        filtered: state.statistics.filter((statistic: IStatistics) => {\r\n          const regex = new RegExp(`${state.filter}`, \"gi\");\r\n          return (\r\n            regex.test(statistic.country) || regex.test(statistic.continent)\r\n          );\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport CovidContext from \"./covidContext\";\r\nimport covidReducer from \"./covidReducer\";\r\nimport { initialState, Types, CovidActionTypes } from \"../types\";\r\n\r\ntype CountProviderProps = { children: React.ReactNode };\r\n\r\nconst CovidStateProvider = ({ children }: CountProviderProps) => {\r\n  const [state, dispatch] = useReducer(covidReducer, initialState);\r\n  return (\r\n    <CovidContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </CovidContext.Provider>\r\n  );\r\n};\r\n\r\nconst GetStatistics = async (dispatch: React.Dispatch<CovidActionTypes>) => {\r\n  const instance = axios.create({\r\n    baseURL: \"https://covid-193.p.rapidapi.com\",\r\n    timeout: 2000,\r\n    headers: {\r\n      \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n      \"x-rapidapi-key\": \"1d44c92e7dmsh6acba81f6a50633p153ab1jsnf6d66d18205e\",\r\n      useQueryString: true,\r\n    },\r\n  });\r\n\r\n  try {\r\n    const res = await instance.get(`/statistics`);\r\n\r\n    dispatch({ type: Types.Statistics, statistics: res.data.response });\r\n  } catch (error) {\r\n    console.log(\"onClick -> error\", error);\r\n  }\r\n};\r\nconst filterStatistics = (\r\n  dispatch: React.Dispatch<CovidActionTypes>,\r\n  text: string\r\n) => {\r\n  dispatch({ type: Types.SetFilter, filter: text });\r\n  dispatch({ type: Types.Filter });\r\n};\r\nexport { CovidStateProvider, GetStatistics, filterStatistics };\r\n","import React from \"react\";\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\r\nimport { Layout, Row, Col, Statistic, Divider } from \"antd\";\r\nimport { IDeath, ICase } from \"../context/types\";\r\nconst { Content } = Layout;\r\nconst Details: React.FC<{ deaths: IDeath; cases: ICase; tests: number }> = ({\r\n  deaths,\r\n  cases,\r\n  tests,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Content>\r\n        <Divider orientation=\"left\" style={{ color: \"grey\", fontWeight: 600 }}>\r\n          Deaths\r\n        </Divider>\r\n        <Row gutter={16}>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"1M_pop\"\r\n              value={deaths.M_pop == null ? \"No data\" : deaths.M_pop}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                deaths.M_pop > 10 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"New\"\r\n              value={deaths.new == null ? \"No data\" : deaths.new}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                deaths.new > 1000 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"Total\"\r\n              value={deaths.total}\r\n              valueStyle={{ color: \"red\", fontSize: 18 }}\r\n              prefix={\r\n                deaths.total > 1000 ? (\r\n                  <ArrowUpOutlined />\r\n                ) : (\r\n                  <ArrowDownOutlined />\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\" style={{ color: \"grey\", fontWeight: 600 }}>\r\n          Cases\r\n        </Divider>\r\n        <Row gutter={24}>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"1M_pop\"\r\n              value={cases.M_pop == null ? \"No data\" : cases.M_pop}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                cases.M_pop > 10 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"New\"\r\n              value={cases.new == null ? \"No data\" : cases.new}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                cases.new > 1000 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"Active\"\r\n              value={cases.active == null ? \"No data\" : cases.active}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                cases.active > 1000 ? (\r\n                  <ArrowUpOutlined />\r\n                ) : (\r\n                  <ArrowDownOutlined />\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"Recovered\"\r\n              value={cases.recovered == null ? \"No data\" : cases.recovered}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                cases.recovered > 1000 ? (\r\n                  <ArrowUpOutlined />\r\n                ) : (\r\n                  <ArrowDownOutlined />\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Statistic\r\n              title=\"Total\"\r\n              value={cases.total == null ? \"No data\" : cases.total}\r\n              valueStyle={{ color: \"#3f8600\", fontSize: 18 }}\r\n              prefix={\r\n                cases.total > 1000 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={8} style={{ backgroundColor: \"#DCE5CD\" }}>\r\n            <Statistic\r\n              title=\"Tests\"\r\n              value={tests == null ? \"No data\" : tests}\r\n              valueStyle={{\r\n                color: \"red\",\r\n                fontSize: 18,\r\n                fontWeight: 500,\r\n              }}\r\n              prefix={\r\n                tests > 1000 ? <ArrowUpOutlined /> : <ArrowDownOutlined />\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ClockCircleOutlined } from \"@ant-design/icons\";\r\nimport CovidContext from \"../context/covid/covidContext\";\r\nimport { Pagination, Card, Spin, Space, Timeline, Input, Layout } from \"antd\";\r\nimport { IStatistics } from \"../context/types\";\r\nimport Details from \"./Details\";\r\nimport { filterStatistics } from \"../context/covid/covidStateProvider\";\r\n\r\nconst { Search } = Input;\r\nconst { Content } = Layout;\r\nconst gridStyle = {\r\n  width: \"25%\",\r\n  height: \"45%\",\r\n  textAlign: \"center\",\r\n} as React.CSSProperties;\r\nconst Statistics: React.FC<{ statistics: Object[] | any }> = ({\r\n  statistics,\r\n}) => {\r\n  const { state, dispatch } = useContext(CovidContext);\r\n  const { filtered } = state;\r\n  const [begin, setBegin] = useState(0);\r\n  const [end, setEnd] = useState(12);\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  let covidStatistics: any;\r\n  let setCovidStatistics: any;\r\n  [covidStatistics, setCovidStatistics] = useState([]);\r\n  useEffect(() => {\r\n    if (statistics) {\r\n      setBegin(activePage * 12 - 12);\r\n      setEnd(activePage * 12);\r\n    }\r\n  }, [activePage]);\r\n\r\n  useEffect(() => {\r\n    if (statistics !== null) {\r\n      const statisticsData = statistics.slice(begin, end);\r\n      setCovidStatistics(statisticsData);\r\n    }\r\n    if (filtered !== null) {\r\n      setCovidStatistics(filtered);\r\n    }\r\n  }, [statistics, begin, filtered]);\r\n  const handleSetPage = (event: any, data: any) => {\r\n    setActivePage(event);\r\n  };\r\n  return (\r\n    <>\r\n      <Content\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Pagination\r\n          total={statistics && Math.ceil(statistics.length)}\r\n          showTotal={(total, range) =>\r\n            `${range[0]}-${range[1]} of ${total} items`\r\n          }\r\n          pageSize={12}\r\n          defaultCurrent={1}\r\n          onChange={handleSetPage}\r\n        />\r\n        <Search\r\n          placeholder=\"Search country,continent\"\r\n          size=\"large\"\r\n          onSearch={(value: any) => filterStatistics(dispatch, value)}\r\n          style={{ width: 400 }}\r\n        />\r\n      </Content>\r\n      <Card>\r\n        {statistics !== null ? (\r\n          covidStatistics.map((country: IStatistics, key: number) => (\r\n            <Card.Grid style={gridStyle} key={key}>\r\n              <Timeline mode={\"alternate\"}>\r\n                <Timeline.Item color=\"green\" label={country.continent}>\r\n                  <p style={{ fontWeight: 900, fontSize: 18 }}>\r\n                    {country.country}\r\n                  </p>\r\n                </Timeline.Item>\r\n                <Timeline.Item\r\n                  dot={<ClockCircleOutlined className=\"timeline-clock-icon\" />}\r\n                  color=\"green\"\r\n                  label=\"Day\"\r\n                >\r\n                  {country.day}\r\n                </Timeline.Item>\r\n                <Timeline.Item color=\"orange\" label=\"Population\">\r\n                  {country.population.toLocaleString()}\r\n                </Timeline.Item>\r\n              </Timeline>\r\n              <Details\r\n                deaths={country.deaths}\r\n                cases={country.cases}\r\n                tests={country.tests.total}\r\n              />\r\n            </Card.Grid>\r\n          ))\r\n        ) : (\r\n          <Space size=\"middle\" style={{ textAlign: \"center\" }}>\r\n            <Spin size=\"small\" />\r\n            <Spin />\r\n            <Spin size=\"large\" />\r\n          </Space>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport Statistics from \"../Statistics\";\r\nimport CovidContext from \"../../context/covid/covidContext\";\r\nimport { GetStatistics } from \"../../context/covid/covidStateProvider\";\r\n\r\nimport { Layout, Button, Menu } from \"antd\";\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst Home: React.FC = () => {\r\n  const { state, dispatch } = useContext(CovidContext);\r\n  const { statistics } = state;\r\n\r\n  useEffect(() => {\r\n    GetStatistics(dispatch);\r\n  }, [statistics]);\r\n\r\n  const onClick = () => {\r\n    GetStatistics(dispatch);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Layout style={{ backgroundColor: \"white\" }}>\r\n        <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\r\n            <Menu.Item key=\"1\">COVID-19 Statistics</Menu.Item>\r\n          </Menu>\r\n        </Header>\r\n        <Content style={{ padding: \"150px 50px\" }}>\r\n          <Button\r\n            onClick={onClick}\r\n            style={{\r\n              backgroundColor: \"#001529\",\r\n              color: \"whitesmoke\",\r\n              margin: \"0 0 10px 0\",\r\n            }}\r\n            size={\"large\"}\r\n          >\r\n            Refresh Statistics\r\n          </Button>\r\n\r\n          <Statistics statistics={statistics} />\r\n        </Content>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { CovidStateProvider } from \"./context/covid/covidStateProvider\";\nimport Home from \"./components/pages/Home\";\nfunction App() {\n  return (\n    <CovidStateProvider>\n      <div className=\"App\"></div>\n      <Home />\n    </CovidStateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}